(define (front-ptr queue) (queue `front))
(define (rear-ptr queue) (queue `rear))
(define (pre-rear-ptr queue) (queue `pre-rear))
(define (set-front-ptr! queue item) 
  ((queue `set-front) item))
(define (set-rear-ptr! queue item) 
  ((queue `set-rear) item))
(define (set-pre-rear-ptr! queue item)
  ((queue `set-pre-rear) item))

(define (empty-dequeue? queue) (null? (front-ptr queue)))

(define (make-dequeue)
  (let ((front-ptr `())
        (rear-ptr `())
        (pre-rear-ptr `()))
  (define (set-front item)
    (set! front-ptr item))
  (define (set-rear item)
    (set! rear-ptr item))
  (define (set-pre-rear item)
    (set! pre-rear-ptr item))
  (define (dispatch m)
    (cond ((eq? m `front) front-ptr)
          ((eq? m `rear) rear-ptr)
          ((eq? m `pre-rear) pre-rear-ptr)
          ((eq? m `set-front) set-front)
          ((eq? m `set-rear) set-rear)
          ((eq? m `set-pre-rear) set-pre-rear)
          (else (error "Unknown request -- MAKE-DEQUEUE") m)))
  dispatch))

(define (front-dequeue queue)
  (if (empty-dequeue? queue)
    (error "FRONT called with an empty queue" queue)
    (car (front-ptr queue))))

(define (rear-dequeue queue)
  (if (empty-dequeue? queue)
    (error "rear called with an empty queue" queue)
    (car (rear-ptr queue))))

(define (rear-insert-queue! queue item)
  (let ((new-pair (cons item `())))
    (cond ((empty-dequeue? queue)
            (set-front-ptr! queue new-pair)
            (set-rear-ptr! queue new-pair)
            queue)
          (else
            (set-pre-rear-ptr! queue (rear-ptr queue))
            (set-cdr! (rear-ptr queue) new-pair)
            (set-rear-ptr! queue new-pair)
            queue))))

(define (rear-delete-queue! queue)
  (cond ((empty-dequeue? queue)
         (error "DELETE! called with an empty queue" queue))
        (else
          (display (pre-rear-ptr queue))
          (set-cdr! (pre-rear-ptr queue) `())
          (set-rear-ptr! queue pre-rear-ptr)
  queue)))

(define (front-insert-queue! queue item)
  (let ((new-pair (cons item `())))
    (cond ((empty-dequeue? queue)
            (set-front-ptr! queue new-pair)
            (set-rear-ptr! queue new-pair)
            queue)
          (else
            (set-cdr! new-pair (front-ptr queue))
            (set-front-ptr! queue new-pair)
            queue))))

(define (front-delete-queue! queue)
  (cond ((empty-dequeue? queue)
         (error "DELETE! called with an empty queue" queue))
        (else (set-front-ptr! queue (cdr (front-ptr queue)))
  queue)))


(define (print-queue queue)
  (display (front-ptr queue)))

(define q1 (make-dequeue))
(print-queue (rear-insert-queue! q1 `a))
(print-queue (rear-insert-queue! q1 `b))
(print-queue (front-delete-queue! q1))
(print-queue (front-delete-queue! q1))

(print-queue (front-insert-queue! q1 `a))
(print-queue (front-insert-queue! q1 `b))
(print-queue (rear-delete-queue! q1))
(print-queue (rear-delete-queue! q1))